import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class CourseRegistrationSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        List<Student> students = new ArrayList<>();
        List<Course> courses = new ArrayList<>();

        // Adding some sample courses
        courses.add(new Course("CSE101", "Introduction to Computer Science", 30));
        courses.add(new Course("MAT201", "Calculus", 25));

        while (true) {
            System.out.println("Choose an option:");
            System.out.println("1. Register a new student");
            System.out.println("2. Register a student for a course");
            System.out.println("3. View all courses");
            System.out.println("4. Exit");

            int option = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (option) {
                case 1:
                    System.out.print("Enter student ID: ");
                    String studentId = scanner.nextLine();
                    System.out.print("Enter student name: ");
                    String studentName = scanner.nextLine();
                    students.add(new Student(studentId, studentName));
                    System.out.println("Student registered successfully.");
                    break;
                case 2:
                    if (students.isEmpty()) {
                        System.out.println("No students registered yet. Register a student first.");
                        break;
                    }

                    System.out.println("Available courses:");
                    for (int i = 0; i < courses.size(); i++) {
                        Course course = courses.get(i);
                        System.out.println((i + 1) + ". " + course.getCourseName() +
                                " (Current capacity: " + course.getCurrentCapacity() + "/" + course.getMaxCapacity() + ")");
                    }

                    System.out.print("Enter student ID: ");
                    String stdId = scanner.nextLine();

                    Student student = null;
                    for (Student std : students) {
                        if (std.getStudentId().equals(stdId)) {
                            student = std;
                            break;
                        }
                    }

                    if (student == null) {
                        System.out.println("Student with ID " + stdId + " not found. Register the student first.");
                        break;
                    }

                    System.out.print("Enter course number to register student (1-" + courses.size() + "): ");
                    int courseNum = scanner.nextInt();
                    scanner.nextLine(); // Consume newline

                    if (courseNum < 1 || courseNum > courses.size()) {
                        System.out.println("Invalid course number.");
                        break;
                    }

                    Course selectedCourse = courses.get(courseNum - 1);
                    boolean enrolled = selectedCourse.enrollStudent();

                    if (enrolled) {
                        System.out.println("Student " + student.getStudentName() + " registered for course " + selectedCourse.getCourseName() + ".");
                    } else {
                        System.out.println("Course " + selectedCourse.getCourseName() + " is full. Registration failed for student " + student.getStudentName() + ".");
                    }
                    break;
                case 3:
                    System.out.println("All courses:");
                    for (int i = 0; i < courses.size(); i++) {
                        Course course = courses.get(i);
                        System.out.println((i + 1) + ". " + course.getCourseName() +
                                " (Current capacity: " + course.getCurrentCapacity() + "/" + course.getMaxCapacity() + ")");
                    }
                    break;
                case 4:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid option. Please choose a valid option.");
                    break;
            }
        }
    }
}

class Course {
    private String courseId;
    private String courseName;
    private int maxCapacity;
    private int currentCapacity;

    public Course(String courseId, String courseName, int maxCapacity) {
        this.courseId = courseId;
        this.courseName = courseName;
        this.maxCapacity = maxCapacity;
        this.currentCapacity = 0; // Initially no students enrolled
    }

    public String getCourseId() {
        return courseId;
    }

    public String getCourseName() {
        return courseName;
    }

    public int getMaxCapacity() {
        return maxCapacity;
    }

    public int getCurrentCapacity() {
        return currentCapacity;
    }

    public boolean enrollStudent() {
        if (currentCapacity < maxCapacity) {
            currentCapacity++;
            return true; // Enrollment successful
        } else {
            return false; // Enrollment failed (course is full)
        }
    }
}

class Student {
    private String studentId;
    private String studentName;
{}
    public Student(String studentId, String studentName) {
        this.studentId = studentId;
        this.studentName = studentName;
    }

    public String getStudentId() {
        return studentId;
    }

    public String getStudentName() {
        return studentName;
    }
}
